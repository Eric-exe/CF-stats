// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Problem {
    id                      String                  @id
    contestId               Int
    index                   String
    name                    String?
    ratings                 Int?                     @default(-1)
    tags                    String[]

    // handles relationships, shouldn't be accessed from this field
    assigns                 CFAssignedProblem[]
    userProblems            UserProblem[]
    submissions             Submission[]

    @@unique([contestId, index])
}

model User {
    username                String                  @id @unique
    cfHandle                String?
    cfEstimatedElo          Int                     @default(1000)
    cfSubmissions           Submission[]
    cfProblems              UserProblem[]
    cfAssignedProblem       CFAssignedProblem?
    cfLastMonthSubmissions  Int[]
    cfLastMonthAC           Int[]
    posts                   Post[]
}

model Submission {
    id                      Int                     @id @default(autoincrement())
    author                  User                    @relation(fields: [authorUsername], references: [username])
    authorUsername          String                  
    problem                 Problem                 @relation(fields: [problemId], references: [id])
    problemId               String                  
    timeCreated             DateTime
    programmingLang         String
    verdict                 String
    timeUsed                Int
    memoryUsed              Int
}

model UserProblem {
    id                      Int                     @id @default(autoincrement())
    user                    User                    @relation(fields: [username], references: [username])
    username                String                  
    problem                 Problem                 @relation(fields: [problemId], references: [id])
    problemId               String
    status                  String

    @@index([username, problemId])
}

model CFAssignedProblem {
    id                      Int                     @id @default(autoincrement())
    assignedUser            User                    @relation(fields: [assignedUsername], references: [username])
    assignedUsername        String                  @unique
    problem                 Problem                 @relation(fields: [problemId], references: [id])
    problemId               String
    timeAssigned            DateTime                @default(now())
}

model Post {
    id                      Int                     @id @default(autoincrement())
    author                  User                    @relation(fields: [authorUsername], references: [username])
    authorUsername          String

    @@index([authorUsername])
}