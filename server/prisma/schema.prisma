// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Metadata {
    id                          Int                     @id @default(autoincrement())
    key                         String                  @unique
    problemsRatingSpread        Json                    @default("{}")
    problemsTagsSpread          Json                    @default("{}")
    problemsLastUpdated         DateTime                @default("1970-01-01T00:00:00.000Z")
}

model Problem {
    id                          String                  @id @unique
    contestId                   Int
    index                       String
    name                        String
    rating                      Int                      @default(-1)
    tags                        String[]

    // handles relationships, shouldn't be accessed from this field
    assigned                    User[]
    userProblems                UserProblemStatus[]
    submissions                 Submission[]
}

model User {
    username                    String                  @id @unique
    handle                      String?                 @unique
    rating                      Int                     @default(0)
    estimatedRating             Int                     @default(0)
    submissions                 Submission[]
    problemStatuses             UserProblemStatus[]
    problemsAC                  Int                     @default(0)
    totalSubmissions            Int                     @default(0)
    totalAC                     Int                     @default(0)
    tagsFrequency               Json                    @default("{}")
    tagsDifficulty              Json                    @default("{}")
    ratingsFrequency            Json                    @default("{}")
    ratingsAC                   Json                    @default("{}")
    assignedProblem             Problem?                @relation(fields: [assignedProblemId], references: [id])
    assignedProblemId           String?
    recentSubmissions           Int[]
    recentAC                    Int[]
    posts                       Post[]
    postsUpvoted                Post[]                  @relation("upvotedPosts")
    postsDownvoted              Post[]                  @relation("downvotedPosts")
    lastUpdated                 DateTime                @default("1970-01-01T00:00:00.000Z")
    isUpdating                  Boolean                 @default(false)
    cfLinkKey                   String                  @default("")
}

model Submission {
    id                          Int                     @id 
    author                      User                    @relation(fields: [authorUsername], references: [username], onDelete: Cascade)
    authorUsername              String                  
    problem                     Problem                 @relation(fields: [problemId], references: [id])
    problemId                   String                  
    timeCreated                 DateTime
    programmingLang             String
    verdict                     String
    timeUsed                    Int
    memoryUsed                  Int
}

model UserProblemStatus {
    id                          Int                     @id @default(autoincrement())
    user                        User                    @relation(fields: [username], references: [username], onDelete: Cascade)
    username                    String                  
    problem                     Problem                 @relation(fields: [problemId], references: [id])
    problemId                   String
    submissions                 Int                     @default(0)
    AC                          Int                     @default(0)
    lastAttempted               DateTime                
    userDifficultyRating        Int                     @default(-1)

    @@unique([username, problemId])
}

model Post {
    id                          Int                     @id @default(autoincrement())
    author                      User                    @relation(fields: [authorUsername], references: [username], onDelete: Cascade)
    authorUsername              String
    title                       String
    body                        String 
    tags                        String[]
    upvotes                     User[]                  @relation("upvotedPosts")
    downvotes                   User[]                  @relation("downvotedPosts")
    votes                       Int                     @default(0)
    timeCreated                 DateTime                @default(now())

    @@index([authorUsername])
    @@unique([id, authorUsername])
}

model Contest {
    id                          Int                     @id @unique
    name                        String                  
    type                        String
    phase                       String                  
    startTime                   DateTime
    durationSeconds             Int
}